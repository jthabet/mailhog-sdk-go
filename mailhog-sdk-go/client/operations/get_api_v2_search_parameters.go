// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAPIV2SearchParams creates a new GetAPIV2SearchParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAPIV2SearchParams() *GetAPIV2SearchParams {
	return &GetAPIV2SearchParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIV2SearchParamsWithTimeout creates a new GetAPIV2SearchParams object
// with the ability to set a timeout on a request.
func NewGetAPIV2SearchParamsWithTimeout(timeout time.Duration) *GetAPIV2SearchParams {
	return &GetAPIV2SearchParams{
		timeout: timeout,
	}
}

// NewGetAPIV2SearchParamsWithContext creates a new GetAPIV2SearchParams object
// with the ability to set a context for a request.
func NewGetAPIV2SearchParamsWithContext(ctx context.Context) *GetAPIV2SearchParams {
	return &GetAPIV2SearchParams{
		Context: ctx,
	}
}

// NewGetAPIV2SearchParamsWithHTTPClient creates a new GetAPIV2SearchParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAPIV2SearchParamsWithHTTPClient(client *http.Client) *GetAPIV2SearchParams {
	return &GetAPIV2SearchParams{
		HTTPClient: client,
	}
}

/* GetAPIV2SearchParams contains all the parameters to send to the API endpoint
   for the get API v2 search operation.

   Typically these are written to a http.Request.
*/
type GetAPIV2SearchParams struct {

	/* Kind.

	   Kind of search
	*/
	Kind string

	/* Limit.

	   Number of messages

	   Format: int64
	   Default: 50
	*/
	Limit *int64

	/* Query.

	   Search parameter
	*/
	Query string

	/* Start.

	   Start index

	   Format: int64
	*/
	Start *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get API v2 search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2SearchParams) WithDefaults() *GetAPIV2SearchParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get API v2 search params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAPIV2SearchParams) SetDefaults() {
	var (
		limitDefault = int64(50)

		startDefault = int64(0)
	)

	val := GetAPIV2SearchParams{
		Limit: &limitDefault,
		Start: &startDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get API v2 search params
func (o *GetAPIV2SearchParams) WithTimeout(timeout time.Duration) *GetAPIV2SearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API v2 search params
func (o *GetAPIV2SearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API v2 search params
func (o *GetAPIV2SearchParams) WithContext(ctx context.Context) *GetAPIV2SearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API v2 search params
func (o *GetAPIV2SearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API v2 search params
func (o *GetAPIV2SearchParams) WithHTTPClient(client *http.Client) *GetAPIV2SearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API v2 search params
func (o *GetAPIV2SearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKind adds the kind to the get API v2 search params
func (o *GetAPIV2SearchParams) WithKind(kind string) *GetAPIV2SearchParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the get API v2 search params
func (o *GetAPIV2SearchParams) SetKind(kind string) {
	o.Kind = kind
}

// WithLimit adds the limit to the get API v2 search params
func (o *GetAPIV2SearchParams) WithLimit(limit *int64) *GetAPIV2SearchParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API v2 search params
func (o *GetAPIV2SearchParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithQuery adds the query to the get API v2 search params
func (o *GetAPIV2SearchParams) WithQuery(query string) *GetAPIV2SearchParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the get API v2 search params
func (o *GetAPIV2SearchParams) SetQuery(query string) {
	o.Query = query
}

// WithStart adds the start to the get API v2 search params
func (o *GetAPIV2SearchParams) WithStart(start *int64) *GetAPIV2SearchParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get API v2 search params
func (o *GetAPIV2SearchParams) SetStart(start *int64) {
	o.Start = start
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIV2SearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param kind
	qrKind := o.Kind
	qKind := qrKind
	if qKind != "" {

		if err := r.SetQueryParam("kind", qKind); err != nil {
			return err
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	// query param query
	qrQuery := o.Query
	qQuery := qrQuery
	if qQuery != "" {

		if err := r.SetQueryParam("query", qQuery); err != nil {
			return err
		}
	}

	if o.Start != nil {

		// query param start
		var qrStart int64

		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := swag.FormatInt64(qrStart)
		if qStart != "" {

			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
